<!-- Views/UserManagement/Details.cshtml -->
@model ShopForHome.ViewModels.UserViewModel
@{
    ViewData["Title"] = "User Details";
    Layout = "_Layout";
}

<div class="container-fluid">
    <!-- Page Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="page-title">
                <i class="fas fa-user me-3"></i>User Details
            </h1>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Dashboard")">Dashboard</a></li>
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "UserManagement")">User Management</a></li>
                    <li class="breadcrumb-item active">@Model.FullName</li>
                </ol>
            </nav>
        </div>
        <div class="btn-group">
            <a href="@Url.Action("Edit", new { id = Model.UserId })" class="btn btn-primary">
                <i class="fas fa-edit me-2"></i>Edit User
            </a>
            <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left me-2"></i>Back to Users
            </a>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-4">
            <!-- User Profile Card -->
            <div class="card">
                <div class="card-body text-center">
                    <div class="avatar-lg bg-primary rounded-circle d-inline-flex align-items-center justify-content-center mb-3">
                        <span class="text-white fw-bold fs-2">@Model.FullName.Substring(0, 1).ToUpper()</span>
                    </div>
                    <h4 class="card-title">@Model.FullName</h4>
                    <p class="text-muted">@Model.Email</p>
                    <div class="mb-3">
                        <span class="badge @(Model.IsActive ? "bg-success" : "bg-danger") fs-6 px-3 py-2">
                            <i class="fas @(Model.IsActive ? "fa-check" : "fa-times") me-2"></i>
                            @(Model.IsActive ? "Active" : "Inactive")
                        </span>
                    </div>
                    <div class="mb-3">
                        @foreach (var role in Model.Roles)
                        {
                            <span class="badge @(role == "Admin" ? "bg-danger" : "bg-primary") me-1 mb-1">
                                <i class="fas fa-user-tag me-1"></i>@role
                            </span>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-8">
            <!-- User Information -->
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-info-circle me-2"></i>Account Information
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label text-muted">User ID</label>
                            <div class="fw-semibold">#@Model.UserId</div>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label text-muted">Full Name</label>
                            <div class="fw-semibold">@Model.FullName</div>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label text-muted">Email Address</label>
                            <div class="fw-semibold">
                                <a href="mailto:@Model.Email" class="text-decoration-none">@Model.Email</a>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label text-muted">Account Status</label>
                            <div class="fw-semibold">
                                <span class="text-@(Model.IsActive ? "success" : "danger")">
                                    @(Model.IsActive ? "Active" : "Inactive")
                                </span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label text-muted">Assigned Roles</label>
                            <div class="fw-semibold">
                                @if (Model.Roles.Any())
                                {
                                    foreach (var role in Model.Roles)
                                    {
                                        <span class="badge @(role == "Admin" ? "bg-danger" : "bg-primary") me-1">@role</span>
                                    }
                                }
                                else
                                {
                                    <span class="text-muted">No roles assigned</span>
                                }
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label text-muted">Member Since</label>
                            <div class="fw-semibold">@Model.CreatedAt.ToString("MMMM dd, yyyy")</div>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label text-muted">Last Updated</label>
                            <div class="fw-semibold">@Model.UpdatedAt.ToString("MMMM dd, yyyy")</div>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label text-muted">Account Age</label>
                            <div class="fw-semibold">@((DateTime.Now - Model.CreatedAt).Days) days</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="card mt-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-cogs me-2"></i>Actions
                    </h5>
                </div>
                <div class="card-body">
                    <div class="d-flex gap-2 flex-wrap">
                        <a href="@Url.Action("Edit", new { id = Model.UserId })" class="btn btn-primary">
                            <i class="fas fa-edit me-2"></i>Edit User
                        </a>
                        <button type="button" class="btn btn-warning" onclick="resetPassword(@Model.UserId)">
                            <i class="fas fa-key me-2"></i>Reset Password
                        </button>
                        <button type="button" class="btn btn-@(Model.IsActive ? "secondary" : "success")"
                                onclick="toggleStatus(@Model.UserId, @Model.IsActive.ToString().ToLower())">
                            <i class="fas fa-@(Model.IsActive ? "pause" : "play") me-2"></i>
                            @(Model.IsActive ? "Deactivate" : "Activate") User
                        </button>
                        <button type="button" class="btn btn-danger" onclick="confirmDelete(@Model.UserId, '@Model.FullName')">
                            <i class="fas fa-trash me-2"></i>Delete User
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function resetPassword(userId) {
            // Implement password reset functionality
            alert('Password reset functionality would be implemented here');
        }

        function toggleStatus(userId, currentStatus) {
            const action = currentStatus ? 'deactivate' : 'activate';
            if (confirm(`Are you sure you want to ${action} this user?`)) {
                // Implement status toggle functionality
                alert(`User ${action} functionality would be implemented here`);
            }
        }

        function confirmDelete(userId, userName) {
            if (confirm(`Are you sure you want to delete the user "${userName}"? This action cannot be undone.`)) {
                // Create a form and submit it
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '@Url.Action("Delete")/' + userId;
                document.body.appendChild(form);
                form.submit();
            }
        }
    </script>
}